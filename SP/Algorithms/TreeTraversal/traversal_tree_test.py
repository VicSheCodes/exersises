from io import StringIO

from traversal_tree import TreeNode, create_sample_tree, inorder_traversal


class TestTreeNode:
    def test_node_creation(self):
        node = TreeNode(5, TreeNode(3), TreeNode(8))
        assert node.val == 5, "Node value should be 5"
        assert node.left.val == 3, "Left child value should be 3"
        assert node.right.val == 8, "Right child value should be 8"

    def test_node_traversal(self):
        node = TreeNode(5, TreeNode(3), TreeNode(8))
        assert node.traverse() == [5, 3, 8], "Node traversal should be [5, 3, 8]"


"""
This part of the code is used to redirect the standard output (sys.stdout) 
to an in-memory string buffer (StringIO) temporarily.

Here's how it works:

1. StringIO(): This creates an empty string buffer in memory.
2. with StringIO() as fake_out: This creates a context manager that opens the StringIO object and assigns it 
 to the variable fake_out. The with statement ensures that the StringIO object is closed and resources are
 cleaned up properly after the block of code within the with statement is executed.
3. import sys: This imports the sys module, which provides access to system-specific parameters and functions,
 including standard input, output, and error streams.
4. sys.stdout = fake_out: This line redirects the standard output stream (sys.stdout) to the StringIO object fake_out.
 As a result, any data written to sys.stdout will be captured and stored in the StringIO buffer instead of being
  displayed in the console.
By redirecting sys.stdout to fake_out, the code can capture the output generated by the inorder_traversal function
 (which would normally be printed to the console) and store it in the fake_out string buffer.
  This allows the test to inspect the output and verify its correctness without affecting the console output.
"""


class TestInorderTraversal:

    def test_inorder_traversal(self):
        root = create_sample_tree()

        # Redirect stdout to capture printed output
        with StringIO() as fake_out:
            import sys
            sys.stdout = fake_out

            inorder_traversal(root)

            # Get the printed output
            printed_output = fake_out.getvalue().strip().split('\n')

        # Assert that printed output matches expected inorder traversal
        expected_output = ['6', '3', '7', '1', '5', '2', '4']
        assert printed_output == expected_output, f"Expected: {expected_output}, Got: {printed_output}"


